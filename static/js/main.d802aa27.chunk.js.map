{"version":3,"sources":["pages/LoginPage.js","pages/PatientPage.js","pages/ProviderPage.js","App.js","serviceWorker.js","index.js"],"names":["USER_TYPE","NormalLoginForm","props","className","name","initialValues","remember","onFinish","values","console","log","style","display","width","justifyContent","position","top","left","Item","checkedChildren","unCheckedChildren","checked","currentUser","onChange","setUserType","rules","required","message","prefix","UserOutlined","placeholder","LockOutlined","type","valuePropName","noStyle","to","htmlType","href","Header","Layout","Content","Footer","Sider","SubMenu","Menu","PatientPage","useState","Collapsed","setCollapsed","minHeight","collapsible","collapsed","onCollapse","theme","defaultSelectedKeys","mode","key","PieChartOutlined","DesktopOutlined","title","TeamOutlined","FileOutlined","padding","margin","textAlign","ProviderPage","App","user","setUser","path","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.d802aa27.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Form, Input, Button, Checkbox } from \"antd\";\r\nimport { UserOutlined, LockOutlined } from \"@ant-design/icons\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Switch } from \"antd\";\r\nimport \"./LoginPage.css\";\r\n\r\nconst USER_TYPE = {\r\n  PATIENT: true,\r\n  PROVIDER: false\r\n};\r\n\r\nconst NormalLoginForm = props => {\r\n  const onFinish = values => {\r\n    console.log(\"Received values of form: \", values);\r\n  };\r\n\r\n  return (\r\n    <div className=\"login-page\">\r\n      <Form\r\n        name=\"normal_login\"\r\n        className=\"login-form\"\r\n        initialValues={{ remember: true }}\r\n        onFinish={onFinish}\r\n      >\r\n        <div\r\n          style={{\r\n            display: \"flex\",\r\n            width: \"100%\",\r\n            justifyContent: \"center\",\r\n            position: \"absolute\",\r\n            top: 50,\r\n            left: 0\r\n          }}\r\n        >\r\n          <h1>SusRec</h1>\r\n        </div>\r\n\r\n        <Form.Item name=\"user\">\r\n          <div\r\n            style={{ display: \"flex\", width: \"100%\", justifyContent: \"center\" }}\r\n          >\r\n            <Switch\r\n              checkedChildren=\"Paciente\"\r\n              unCheckedChildren=\"Provedor\"\r\n              checked={props.currentUser}\r\n              onChange={() => props.setUserType(!props.currentUser)}\r\n            />\r\n          </div>\r\n        </Form.Item>\r\n        <Form.Item\r\n          name=\"username\"\r\n          rules={[{ required: true, message: \"Please input your Username!\" }]}\r\n        >\r\n          <Input\r\n            prefix={<UserOutlined className=\"site-form-item-icon\" />}\r\n            placeholder=\"N do CNS\"\r\n          />\r\n        </Form.Item>\r\n        <Form.Item\r\n          name=\"password\"\r\n          rules={[{ required: true, message: \"Please input your Password!\" }]}\r\n        >\r\n          <Input\r\n            prefix={<LockOutlined className=\"site-form-item-icon\" />}\r\n            type=\"password\"\r\n            placeholder=\"Senha\"\r\n          />\r\n        </Form.Item>\r\n        <Form.Item>\r\n          <Form.Item name=\"remember\" valuePropName=\"checked\" noStyle>\r\n            <Checkbox>Lembrar-me</Checkbox>\r\n          </Form.Item>\r\n\r\n          <a className=\"login-form-forgot\">Esqueci minha senha</a>\r\n        </Form.Item>\r\n\r\n        <Form.Item>\r\n          <Link\r\n            to={`${\r\n              props.currentUser === USER_TYPE.PATIENT ? \"/patient\" : \"/provider\"\r\n            }`}\r\n          >\r\n            <Button\r\n              type=\"primary\"\r\n              htmlType=\"submit\"\r\n              className=\"login-form-button\"\r\n            >\r\n              Log in\r\n            </Button>\r\n          </Link>\r\n          Ou <a href=\"\">Registre-se aqui!</a>\r\n        </Form.Item>\r\n      </Form>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NormalLoginForm;\r\n","import React, { useState } from \"react\";\r\nimport { Layout, Menu, Breadcrumb } from \"antd\";\r\nimport {\r\n  DesktopOutlined,\r\n  PieChartOutlined,\r\n  FileOutlined,\r\n  TeamOutlined,\r\n  UserOutlined\r\n} from \"@ant-design/icons\";\r\n\r\nconst { Header, Content, Footer, Sider } = Layout;\r\nconst { SubMenu } = Menu;\r\n\r\nconst PatientPage = props => {\r\n  const [Collapsed, setCollapsed] = useState(false);\r\n\r\n  const onCollapse = collapsed => {\r\n    setCollapsed(collapsed);\r\n  };\r\n\r\n  return (\r\n    <Layout style={{ minHeight: \"100vh\" }}>\r\n      <Sider collapsible collapsed={Collapsed} onCollapse={onCollapse}>\r\n        <div className=\"logo\" />\r\n        <Menu theme=\"dark\" defaultSelectedKeys={[\"1\"]} mode=\"inline\">\r\n          <Menu.Item key=\"1\">\r\n            <PieChartOutlined />\r\n            <span>Option 1</span>\r\n          </Menu.Item>\r\n          <Menu.Item key=\"2\">\r\n            <DesktopOutlined />\r\n            <span>Option 2</span>\r\n          </Menu.Item>\r\n          <SubMenu\r\n            key=\"sub1\"\r\n            title={\r\n              <span>\r\n                <UserOutlined />\r\n                <span>User</span>\r\n              </span>\r\n            }\r\n          >\r\n            <Menu.Item key=\"3\">Tom</Menu.Item>\r\n            <Menu.Item key=\"4\">Bill</Menu.Item>\r\n            <Menu.Item key=\"5\">Alex</Menu.Item>\r\n          </SubMenu>\r\n          <SubMenu\r\n            key=\"sub2\"\r\n            title={\r\n              <span>\r\n                <TeamOutlined />\r\n                <span>Team</span>\r\n              </span>\r\n            }\r\n          >\r\n            <Menu.Item key=\"6\">Team 1</Menu.Item>\r\n            <Menu.Item key=\"8\">Team 2</Menu.Item>\r\n          </SubMenu>\r\n          <Menu.Item key=\"9\">\r\n            <FileOutlined />\r\n          </Menu.Item>\r\n        </Menu>\r\n      </Sider>\r\n      <Layout className=\"site-layout\">\r\n        <Header className=\"site-layout-background\" style={{ padding: 0 }} />\r\n        <Content style={{ margin: \"0 16px\" }}>\r\n          <Breadcrumb style={{ margin: \"16px 0\" }}>\r\n            <Breadcrumb.Item>User</Breadcrumb.Item>\r\n            <Breadcrumb.Item>Bill</Breadcrumb.Item>\r\n          </Breadcrumb>\r\n          <div\r\n            className=\"site-layout-background\"\r\n            style={{ padding: 24, minHeight: 360 }}\r\n          >\r\n            Bill is a cat.\r\n          </div>\r\n        </Content>\r\n        <Footer style={{ textAlign: \"center\" }}>\r\n          Ant Design ©2018 Created by Ant UED\r\n        </Footer>\r\n      </Layout>\r\n    </Layout>\r\n  );\r\n};\r\n\r\nexport default PatientPage;\r\n","import React, { useState } from \"react\";\r\nimport { Layout, Menu, Breadcrumb } from \"antd\";\r\nimport {\r\n  DesktopOutlined,\r\n  PieChartOutlined,\r\n  FileOutlined,\r\n  TeamOutlined,\r\n  UserOutlined\r\n} from \"@ant-design/icons\";\r\n\r\nconst { Header, Content, Footer, Sider } = Layout;\r\nconst { SubMenu } = Menu;\r\n\r\nconst ProviderPage = props => {\r\n  const [Collapsed, setCollapsed] = useState(false);\r\n\r\n  const onCollapse = collapsed => {\r\n    setCollapsed(collapsed);\r\n  };\r\n\r\n  return (\r\n    <Layout style={{ minHeight: \"100vh\" }}>\r\n      <Sider collapsible collapsed={Collapsed} onCollapse={onCollapse}>\r\n        <div className=\"logo\" />\r\n        <Menu theme=\"dark\" defaultSelectedKeys={[\"1\"]} mode=\"inline\">\r\n          <Menu.Item key=\"1\">\r\n            <PieChartOutlined />\r\n            <span>Option 1</span>\r\n          </Menu.Item>\r\n          <Menu.Item key=\"2\">\r\n            <DesktopOutlined />\r\n            <span>Option 2</span>\r\n          </Menu.Item>\r\n          <SubMenu\r\n            key=\"sub1\"\r\n            title={\r\n              <span>\r\n                <UserOutlined />\r\n                <span>User</span>\r\n              </span>\r\n            }\r\n          >\r\n            <Menu.Item key=\"3\">Tom</Menu.Item>\r\n            <Menu.Item key=\"4\">Bill</Menu.Item>\r\n            <Menu.Item key=\"5\">Alex</Menu.Item>\r\n          </SubMenu>\r\n          <SubMenu\r\n            key=\"sub2\"\r\n            title={\r\n              <span>\r\n                <TeamOutlined />\r\n                <span>Team</span>\r\n              </span>\r\n            }\r\n          >\r\n            <Menu.Item key=\"6\">Team 1</Menu.Item>\r\n            <Menu.Item key=\"8\">Team 2</Menu.Item>\r\n          </SubMenu>\r\n          <Menu.Item key=\"9\">\r\n            <FileOutlined />\r\n          </Menu.Item>\r\n        </Menu>\r\n      </Sider>\r\n      <Layout className=\"site-layout\">\r\n        <Header className=\"site-layout-background\" style={{ padding: 0 }} />\r\n        <Content style={{ margin: \"0 16px\" }}>\r\n          <Breadcrumb style={{ margin: \"16px 0\" }}>\r\n            <Breadcrumb.Item>User</Breadcrumb.Item>\r\n            <Breadcrumb.Item>Bill</Breadcrumb.Item>\r\n          </Breadcrumb>\r\n          <div\r\n            className=\"site-layout-background\"\r\n            style={{ padding: 24, minHeight: 360 }}\r\n          >\r\n            Bill is a cat.\r\n          </div>\r\n        </Content>\r\n        <Footer style={{ textAlign: \"center\" }}>\r\n          Ant Design ©2018 Created by Ant UED\r\n        </Footer>\r\n      </Layout>\r\n    </Layout>\r\n  );\r\n};\r\n\r\nexport default ProviderPage;\r\n","import React, { useState } from \"react\";\r\nimport LoginPage from \"./pages/LoginPage\";\r\nimport PatientPage from \"./pages/PatientPage\";\r\nimport ProviderPage from \"./pages/ProviderPage\";\r\nimport { BrowserRouter, Switch, Route } from \"react-router-dom\";\r\nimport \"./App.css\";\r\n\r\nconst USER_TYPE = {\r\n  PATIENT: true,\r\n  PROVIDER: false\r\n};\r\n\r\nfunction App() {\r\n  const [user, setUser] = useState(USER_TYPE.PATIENT);\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <BrowserRouter>\r\n        <Switch>\r\n          <Route path=\"/patient\">\r\n            <PatientPage />\r\n          </Route>\r\n          <Route path=\"/provider\">\r\n            <ProviderPage />\r\n          </Route>\r\n          <Route path=\"/\">\r\n            <LoginPage setUserType={user => setUser(user)} currentUser={user} />\r\n          </Route>\r\n        </Switch>\r\n      </BrowserRouter>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}